노드에서 void 포인터 사용 안하면 점수 감점!
범용성을 위해서 void 포인터를 사용하는 것이다.

pos는 사용 안함 traversal을 위한 것이라 나중에 쓸예정
head는 리스트 첫
rear는 리스트 마지막

역참조 할 때 캐스팅 해야 한다.

메모리 해제
마지막엔 list까지 해제

addNode

기존에 존재하지 않으면 삽입
이미 있다면 빈도만 추가(남녀구분x 연도구분x)
callback으로 중복될 때 경우를 처리한다

removeNode

이름을 찾아서 제거
없으면 제거 못하고 0 return
dataOut을 통해 tNode 넘긴다. 노드만 삭제 한다.

emptyList는 하거나 말거나

traverseList는 printNode 함수 사용해라

createName

char* name = strdup(str);

destroy 함수는
free(pNode->name)

increase_freq 기존의 빈도에 새로운 빈도 더하는 함수

이중연결리스트 삽입

1. 첫 노드 삽입 시

2. 아닌 경우

   2-1 노드가 1개일 시

	2-1-1 노드의 앞에 넣을 시

	2-1-2 노드의 뒤에 넣을 시

	2-1-3 중복일 시

   2-2 아닐 시

	2-2-1 pPre가 헤드노드 일 시

	2-2-2 pPre가 끝 노드일 시

	2-2-3 pPre가 중간 노드일 시

   2-1.중복 시(체크 방법 : 순방향으로 head부터 순차탐색)
 	
	-> 빈도만 추가

   2.2 중복 X

	2.2.1 head에 삽입하는 경우

	2.2.2 중간에 삽입하는 경우

	2.2.3 끝에 삽입하는 경우

이중연결리스트 삭제

1. head부터 pLoc으로 순회

2. key값이 맞는지 체크

    -> 